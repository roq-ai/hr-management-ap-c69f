generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model benefit {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String    @db.VarChar(255)
  description          String?   @db.VarChar(255)
  eligibility_criteria String?   @db.VarChar(255)
  start_date           DateTime? @db.Timestamp(6)
  end_date             DateTime? @db.Timestamp(6)
  employee_id          String    @db.Uuid
  created_at           DateTime  @default(now()) @db.Timestamp(6)
  updated_at           DateTime  @default(now()) @db.Timestamp(6)
  employee             employee  @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?   @db.VarChar(255)
  established_at DateTime? @db.Timestamp(6)
  industry_type  String?   @db.VarChar(255)
  company_size   Int?
  name           String    @db.VarChar(255)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  user_id        String    @db.Uuid
  tenant_id      String    @db.VarChar(255)
  user           user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model employee {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_number    Int
  hire_date          DateTime             @db.Timestamp(6)
  job_title          String               @db.VarChar(255)
  department         String               @db.VarChar(255)
  salary             Int
  user_id            String               @db.Uuid
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  benefit            benefit[]
  user               user                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  performance_review performance_review[]
  training           training[]
}

model performance_review {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  review_date DateTime @db.Timestamp(6)
  reviewer    String   @db.VarChar(255)
  rating      Int
  comments    String?  @db.VarChar(255)
  employee_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model training {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  start_date  DateTime? @db.Timestamp(6)
  end_date    DateTime? @db.Timestamp(6)
  location    String?   @db.VarChar(255)
  employee_id String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  employee    employee  @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  company     company[]
  employee    employee[]
}
